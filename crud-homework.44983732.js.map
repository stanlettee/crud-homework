{"mappings":"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","sources":["src/script.js"],"sourcesContent":["// // Функція для отримання всіх студентів\r\n\r\nasync function getStudents () {\r\n  try {\r\n    return await fetch(\"http://localhost:3000/students\")\r\n    .then((res) => res.json())\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n \r\n\r\n\r\n\r\n// // Функція для відображення студентів у таблиці\r\n\r\nfunction renderStudents(students) {\r\n    const objectChange = students\r\n    .map((object) => {\r\n    const newObject = `\r\n    <tr data-id=\"${object.id}\">\r\n        <td>${object.id}</td>\r\n        <td class=\"name\">${object.name}</td>\r\n        <td class=\"age\">${object.age}</td>\r\n        <td class=\"course\">${object.course}</td>\r\n        <td class=\"skills\">${object.skills}</td>\r\n        <td class=\"email\">${object.email}</td>\r\n        <td class=\"isEnrolled\">${object.isEnrolled}</td>\r\n        <td>\r\n            <button style=\"margin-bottom: 5px\" class=\"edit-button\">Редагувати</button>\r\n            <button class=\"delete-button\">Видалити</button>\r\n        </td>\r\n    </tr>\r\n    `;\r\n    return newObject;\r\n    })\r\n\r\n    .join(\"\");\r\n    return objectChange;\r\n}\r\n\r\n\r\n\r\n// // Функція для додавання нового студента\r\n\r\n// function addStudent(student) {\r\n//     const options = {\r\n//     method: \"POST\",\r\n//     body: JSON.stringify(student),\r\n//     headers: {\r\n//     \"Content-Type\": \"application/json; charset=UTF-8\",\r\n//     },\r\n// };\r\n//    return fetch(\"http://localhost:3000/students\", options)\r\n//   .then((res) => res.json())\r\n// }\r\n\r\nasync function addStudent(student) {\r\n  try {\r\n    return await fetch(\"http://localhost:3000/students\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(student),\r\n        headers: {\r\n        \"Content-Type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    }).then((res) => res.json())\r\n  } catch (error) {\r\n    console.log(error)\r\n}\r\n}\r\n\r\n\r\n\r\n// // Функція для оновлення студента\r\n\r\n// function updateStudent(id, studentData) {\r\n//   return fetch(`http://localhost:3000/students/${id}`, {\r\n//     method: 'PATCH',\r\n//     headers: {\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify(studentData)\r\n//   }).then(res => res.json());\r\n// }\r\n\r\nasync function updateStudent(id, studentData) {\r\n  try {\r\n    return await fetch(`http://localhost:3000/students${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(studentData)\r\n    }).then((res) => res.json())\r\n  } catch (error) {\r\n    console.log(error)\r\n}\r\n}\r\n\r\n\r\n// // Функція для видалення студента\r\n\r\n// function deleteStudent(id) {\r\n//   return fetch(`http://localhost:3000/students/${id}`, {\r\n//     method: \"DELETE\",\r\n//   });\r\n// }\r\n\r\nasync function deleteStudent(id){\r\n  try {\r\n    return await fetch(`http://localhost:3000/students/${id}`, {\r\n        method: \"DELETE\",\r\n    });\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\n\r\n// 1. Реалізуйте функцію getStudents для \r\n// отримання списку всіх студентів (HTTP GET /students) getStudents\r\n\r\ndocument.querySelector('#get-students-btn').addEventListener('click', () => {\r\n    // getStudents()\r\n    // return getStudents()\r\n    getStudents().then(\r\n    (data) =>{\r\n        console.log(data);\r\n        document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n    }\r\n  );\r\n})\r\n\r\n// 2. Реалізуйте функцію addStudent для додавання\r\n//  нового студента (HTTP POST /students) \r\n\r\ndocument.querySelector('#add-student-form').addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.elements.name.value;\r\n    const age = e.target.elements.age.value;\r\n    const course = e.target.elements.course.value;\r\n    const skills = e.target.elements.skills.value;\r\n    const email = e.target.elements.email.value;\r\n    let isEnrolled = e.target.elements.isEnrolled.value;\r\n    if (isEnrolled === true){\r\n        isEnrolled = 'true'\r\n    } else {\r\n        isEnrolled = 'false'\r\n    }\r\n    const studentObject = {\r\n      name: name,\r\n      age: age,\r\n      course: course,\r\n      skills: skills,\r\n      email: email,\r\n      isEnrolled: isEnrolled\r\n    };\r\n    console.log(studentObject)\r\n    addStudent(studentObject).then(() => {\r\n        getStudents().then((data) => {\r\n            document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n    })})\r\n\r\n    e.target.elements.name.value = \"\";\r\n    e.target.elements.age.value = \"\";\r\n    e.target.elements.course.value = \"\";\r\n    e.target.elements.skills.value = \"\";\r\n    e.target.elements.email.value = \"\";\r\n    e.target.elements.isEnrolled.value = \"\";\r\n  });\r\n\r\n\r\n\r\n// 3. Реалізуйте функцію updateStudent \r\n//  для часткового оновлення студента (HTTP PATCH /students/{id})\r\n\r\nlet studentId = null\r\n\r\ndocument.querySelector('tbody').addEventListener('click', (e) => {\r\n    if (e.target.textContent === 'Редагувати') {\r\n        document.querySelector('.add').style.display = 'none'\r\n        document.querySelector('.edit').style.display = 'inline-block'\r\n\r\n        const tr = e.target.closest('tr');\r\n        studentId = tr.getAttribute('data-id');\r\n\r\n        document.querySelector('#name').value = tr.querySelector('.name').textContent;;\r\n        document.querySelector('#age').value = tr.querySelector('.age').textContent;\r\n        document.querySelector('#course').value = tr.querySelector('.course').textContent;\r\n        document.querySelector('#skills').value = tr.querySelector('.skills').textContent;\r\n        document.querySelector('#email').value = tr.querySelector('.email').textContent;\r\n        document.querySelector('#isEnrolled').value = tr.querySelector('.isEnrolled').textContent;\r\n}})\r\n\r\ndocument.querySelector('.edit').addEventListener('click', () => {\r\n  const updatedStudent = {\r\n    name: document.querySelector('#name').value,\r\n    age: document.querySelector('#age').value,\r\n    course: document.querySelector('#course').value,\r\n    skills: document.querySelector('#skills').value,\r\n    email: document.querySelector('#email').value,\r\n    isEnrolled: document.querySelector('#isEnrolled').value\r\n  };\r\n  console.log(studentId)\r\n\r\n  updateStudent(studentId, updatedStudent).then(() => {\r\n    getStudents().then((data) => {\r\n      document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n      document.querySelector('.add').style.display = 'inline-block';\r\n      document.querySelector('.edit').style.display = 'none';\r\n    });\r\n  });\r\n});\r\n\r\n// document.querySelector('.add').addEventListener('click', () => {\r\n\r\n// })\r\n\r\n\r\n// 4. Реалізуйте функцію  для deleteStudent\r\n//  видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\r\n\r\ndocument.querySelector('tbody').addEventListener('click', (e) => {\r\n    if (e.target.textContent === 'Видалити'){\r\n        const tr = e.target.closest('tr');\r\n        const studentId = tr.getAttribute('data-id'); \r\n        deleteStudent(studentId).then(() => {\r\n            getStudents().then((data) => {\r\n                console.log(data);\r\n                document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n            })})\r\n    }}\r\n)\r\n\r\n// 7. Написати JavaScript-код для обробки\r\n//  подій користувача.\r\n\r\n\r\n// 7.1. Додати обробники подій для кнопок,\r\n//  щоб вони виконували відповідні HTTP-запити.\r\n\r\n\r\n// 7.2. При натисканні на кнопку \"Отримати студентів\" \r\n// (GET), виконати HTTP-запит GET /students і \r\n// відобразити отримані дані в таблиці.\r\n\r\n\r\n// 7.3. Реалізувати форму для додавання нового студента.\r\n//  При натисканні на кнопку \"Додати студента\" (POST), \r\n// зібрати дані з полів вводу, сформувати об'єкт з даними  і \r\n// виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\r\n\r\n\r\n// 7.4. Реалізувати можливість оновлення інформації про студента. \r\n// Для кожного студента в таблиці додати кнопку \"Оновити\".\r\n//  При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — \r\n// ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\r\n\r\n\r\n// 7.5. Додати можливість видалення студента. \r\n// Для кожного студента в таблиці додати кнопку \"Видалити\". \r\n// При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id."],"names":[],"version":3,"file":"crud-homework.44983732.js.map","sourceRoot":"/__parcel_source_root/"}