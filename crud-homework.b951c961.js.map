{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["// // Функція для отримання всіх студентів\nasync function getStudents() {\n    try {\n        return await fetch(\"http://localhost:3000/students\").then((res)=>res.json());\n    } catch (error) {\n        console.log(error);\n    }\n}\n// // Функція для відображення студентів у таблиці\nfunction renderStudents(students) {\n    const objectChange = students.map((object)=>{\n        const newObject = `\n    <tr data-id=\"${object.id}\">\n        <td>${object.id}</td>\n        <td class=\"name\">${object.name}</td>\n        <td class=\"age\">${object.age}</td>\n        <td class=\"course\">${object.course}</td>\n        <td class=\"skills\">${object.skills}</td>\n        <td class=\"email\">${object.email}</td>\n        <td class=\"isEnrolled\">${object.isEnrolled}</td>\n        <td>\n            <button style=\"margin-bottom: 5px\" class=\"edit-button\">\\u{420}\\u{435}\\u{434}\\u{430}\\u{433}\\u{443}\\u{432}\\u{430}\\u{442}\\u{438}</button>\n            <button class=\"delete-button\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n        </td>\n    </tr>\n    `;\n        return newObject;\n    }).join(\"\");\n    return objectChange;\n}\n// // Функція для додавання нового студента\n// function addStudent(student) {\n//     const options = {\n//     method: \"POST\",\n//     body: JSON.stringify(student),\n//     headers: {\n//     \"Content-Type\": \"application/json; charset=UTF-8\",\n//     },\n// };\n//    return fetch(\"http://localhost:3000/students\", options)\n//   .then((res) => res.json())\n// }\nasync function addStudent(student) {\n    try {\n        return await fetch(\"http://localhost:3000/students\", {\n            method: \"POST\",\n            body: JSON.stringify(student),\n            headers: {\n                \"Content-Type\": \"application/json; charset=UTF-8\"\n            }\n        }).then((res)=>res.json());\n    } catch (error) {\n        console.log(error);\n    }\n}\n// // Функція для оновлення студента\n// function updateStudent(id, studentData) {\n//   return fetch(`http://localhost:3000/students/${id}`, {\n//     method: 'PATCH',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(studentData)\n//   }).then(res => res.json());\n// }\nasync function updateStudent(id, studentData) {\n    try {\n        return await fetch(`http://localhost:3000/students${id}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(studentData)\n        }).then((res)=>res.json());\n    } catch (error) {\n        console.log(error);\n    }\n}\n// // Функція для видалення студента\n// function deleteStudent(id) {\n//   return fetch(`http://localhost:3000/students/${id}`, {\n//     method: \"DELETE\",\n//   });\n// }\nasync function deleteStudent(id) {\n    try {\n        return await fetch(`http://localhost:3000/students/${id}`, {\n            method: \"DELETE\"\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n// 1. Реалізуйте функцію getStudents для \n// отримання списку всіх студентів (HTTP GET /students) getStudents\ndocument.querySelector('#get-students-btn').addEventListener('click', ()=>{\n    // getStudents()\n    // return getStudents()\n    getStudents().then((data)=>{\n        console.log(data);\n        document.querySelector(\"tbody\").innerHTML = renderStudents(data);\n    });\n});\n// 2. Реалізуйте функцію addStudent для додавання\n//  нового студента (HTTP POST /students) \ndocument.querySelector('#add-student-form').addEventListener('submit', (e)=>{\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const age = e.target.elements.age.value;\n    const course = e.target.elements.course.value;\n    const skills = e.target.elements.skills.value;\n    const email = e.target.elements.email.value;\n    let isEnrolled = e.target.elements.isEnrolled.value;\n    if (isEnrolled === true) isEnrolled = 'true';\n    else isEnrolled = 'false';\n    const studentObject = {\n        name: name,\n        age: age,\n        course: course,\n        skills: skills,\n        email: email,\n        isEnrolled: isEnrolled\n    };\n    console.log(studentObject);\n    addStudent(studentObject).then(()=>{\n        getStudents().then((data)=>{\n            document.querySelector(\"tbody\").innerHTML = renderStudents(data);\n        });\n    });\n    e.target.elements.name.value = \"\";\n    e.target.elements.age.value = \"\";\n    e.target.elements.course.value = \"\";\n    e.target.elements.skills.value = \"\";\n    e.target.elements.email.value = \"\";\n    e.target.elements.isEnrolled.value = \"\";\n});\n// 3. Реалізуйте функцію updateStudent \n//  для часткового оновлення студента (HTTP PATCH /students/{id})\nlet studentId = null;\ndocument.querySelector('tbody').addEventListener('click', (e)=>{\n    if (e.target.textContent === \"\\u0420\\u0435\\u0434\\u0430\\u0433\\u0443\\u0432\\u0430\\u0442\\u0438\") {\n        document.querySelector('.add').style.display = 'none';\n        document.querySelector('.edit').style.display = 'inline-block';\n        const tr = e.target.closest('tr');\n        studentId = tr.getAttribute('data-id');\n        document.querySelector('#name').value = tr.querySelector('.name').textContent;\n        document.querySelector('#age').value = tr.querySelector('.age').textContent;\n        document.querySelector('#course').value = tr.querySelector('.course').textContent;\n        document.querySelector('#skills').value = tr.querySelector('.skills').textContent;\n        document.querySelector('#email').value = tr.querySelector('.email').textContent;\n        document.querySelector('#isEnrolled').value = tr.querySelector('.isEnrolled').textContent;\n    }\n});\ndocument.querySelector('.edit').addEventListener('click', ()=>{\n    const updatedStudent = {\n        name: document.querySelector('#name').value,\n        age: document.querySelector('#age').value,\n        course: document.querySelector('#course').value,\n        skills: document.querySelector('#skills').value,\n        email: document.querySelector('#email').value,\n        isEnrolled: document.querySelector('#isEnrolled').value\n    };\n    console.log(studentId);\n    updateStudent(studentId, updatedStudent).then(()=>{\n        getStudents().then((data)=>{\n            document.querySelector(\"tbody\").innerHTML = renderStudents(data);\n            document.querySelector('.add').style.display = 'inline-block';\n            document.querySelector('.edit').style.display = 'none';\n        });\n    });\n});\n// document.querySelector('.add').addEventListener('click', () => {\n// })\n// 4. Реалізуйте функцію  для deleteStudent\n//  видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\ndocument.querySelector('tbody').addEventListener('click', (e)=>{\n    if (e.target.textContent === \"\\u0412\\u0438\\u0434\\u0430\\u043B\\u0438\\u0442\\u0438\") {\n        const tr = e.target.closest('tr');\n        const studentId = tr.getAttribute('data-id');\n        deleteStudent(studentId).then(()=>{\n            getStudents().then((data)=>{\n                console.log(data);\n                document.querySelector(\"tbody\").innerHTML = renderStudents(data);\n            });\n        });\n    }\n}) // 7. Написати JavaScript-код для обробки\n //  подій користувача.\n // 7.1. Додати обробники подій для кнопок,\n //  щоб вони виконували відповідні HTTP-запити.\n // 7.2. При натисканні на кнопку \"Отримати студентів\" \n // (GET), виконати HTTP-запит GET /students і \n // відобразити отримані дані в таблиці.\n // 7.3. Реалізувати форму для додавання нового студента.\n //  При натисканні на кнопку \"Додати студента\" (POST), \n // зібрати дані з полів вводу, сформувати об'єкт з даними  і \n // виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\n // 7.4. Реалізувати можливість оновлення інформації про студента. \n // Для кожного студента в таблиці додати кнопку \"Оновити\".\n //  При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — \n // ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\n // 7.5. Додати можливість видалення студента. \n // Для кожного студента в таблиці додати кнопку \"Видалити\". \n // При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id.\n;\n\n//# sourceMappingURL=crud-homework.b951c961.js.map\n","// // Функція для отримання всіх студентів\r\n\r\nasync function getStudents () {\r\n  try {\r\n    return await fetch(\"http://localhost:3000/students\")\r\n    .then((res) => res.json())\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n \r\n\r\n\r\n\r\n// // Функція для відображення студентів у таблиці\r\n\r\nfunction renderStudents(students) {\r\n    const objectChange = students\r\n    .map((object) => {\r\n    const newObject = `\r\n    <tr data-id=\"${object.id}\">\r\n        <td>${object.id}</td>\r\n        <td class=\"name\">${object.name}</td>\r\n        <td class=\"age\">${object.age}</td>\r\n        <td class=\"course\">${object.course}</td>\r\n        <td class=\"skills\">${object.skills}</td>\r\n        <td class=\"email\">${object.email}</td>\r\n        <td class=\"isEnrolled\">${object.isEnrolled}</td>\r\n        <td>\r\n            <button style=\"margin-bottom: 5px\" class=\"edit-button\">Редагувати</button>\r\n            <button class=\"delete-button\">Видалити</button>\r\n        </td>\r\n    </tr>\r\n    `;\r\n    return newObject;\r\n    })\r\n\r\n    .join(\"\");\r\n    return objectChange;\r\n}\r\n\r\n\r\n\r\n// // Функція для додавання нового студента\r\n\r\n// function addStudent(student) {\r\n//     const options = {\r\n//     method: \"POST\",\r\n//     body: JSON.stringify(student),\r\n//     headers: {\r\n//     \"Content-Type\": \"application/json; charset=UTF-8\",\r\n//     },\r\n// };\r\n//    return fetch(\"http://localhost:3000/students\", options)\r\n//   .then((res) => res.json())\r\n// }\r\n\r\nasync function addStudent(student) {\r\n  try {\r\n    return await fetch(\"http://localhost:3000/students\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(student),\r\n        headers: {\r\n        \"Content-Type\": \"application/json; charset=UTF-8\",\r\n        }\r\n    }).then((res) => res.json())\r\n  } catch (error) {\r\n    console.log(error)\r\n}\r\n}\r\n\r\n\r\n\r\n// // Функція для оновлення студента\r\n\r\n// function updateStudent(id, studentData) {\r\n//   return fetch(`http://localhost:3000/students/${id}`, {\r\n//     method: 'PATCH',\r\n//     headers: {\r\n//       'Content-Type': 'application/json'\r\n//     },\r\n//     body: JSON.stringify(studentData)\r\n//   }).then(res => res.json());\r\n// }\r\n\r\nasync function updateStudent(id, studentData) {\r\n  try {\r\n    return await fetch(`http://localhost:3000/students${id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(studentData)\r\n    }).then((res) => res.json())\r\n  } catch (error) {\r\n    console.log(error)\r\n}\r\n}\r\n\r\n\r\n// // Функція для видалення студента\r\n\r\n// function deleteStudent(id) {\r\n//   return fetch(`http://localhost:3000/students/${id}`, {\r\n//     method: \"DELETE\",\r\n//   });\r\n// }\r\n\r\nasync function deleteStudent(id){\r\n  try {\r\n    return await fetch(`http://localhost:3000/students/${id}`, {\r\n        method: \"DELETE\",\r\n    });\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n};\r\n\r\n\r\n// 1. Реалізуйте функцію getStudents для \r\n// отримання списку всіх студентів (HTTP GET /students) getStudents\r\n\r\ndocument.querySelector('#get-students-btn').addEventListener('click', () => {\r\n    // getStudents()\r\n    // return getStudents()\r\n    getStudents().then(\r\n    (data) =>{\r\n        console.log(data);\r\n        document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n    }\r\n  );\r\n})\r\n\r\n// 2. Реалізуйте функцію addStudent для додавання\r\n//  нового студента (HTTP POST /students) \r\n\r\ndocument.querySelector('#add-student-form').addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.elements.name.value;\r\n    const age = e.target.elements.age.value;\r\n    const course = e.target.elements.course.value;\r\n    const skills = e.target.elements.skills.value;\r\n    const email = e.target.elements.email.value;\r\n    let isEnrolled = e.target.elements.isEnrolled.value;\r\n    if (isEnrolled === true){\r\n        isEnrolled = 'true'\r\n    } else {\r\n        isEnrolled = 'false'\r\n    }\r\n    const studentObject = {\r\n      name: name,\r\n      age: age,\r\n      course: course,\r\n      skills: skills,\r\n      email: email,\r\n      isEnrolled: isEnrolled\r\n    };\r\n    console.log(studentObject)\r\n    addStudent(studentObject).then(() => {\r\n        getStudents().then((data) => {\r\n            document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n    })})\r\n\r\n    e.target.elements.name.value = \"\";\r\n    e.target.elements.age.value = \"\";\r\n    e.target.elements.course.value = \"\";\r\n    e.target.elements.skills.value = \"\";\r\n    e.target.elements.email.value = \"\";\r\n    e.target.elements.isEnrolled.value = \"\";\r\n  });\r\n\r\n\r\n\r\n// 3. Реалізуйте функцію updateStudent \r\n//  для часткового оновлення студента (HTTP PATCH /students/{id})\r\n\r\nlet studentId = null\r\n\r\ndocument.querySelector('tbody').addEventListener('click', (e) => {\r\n    if (e.target.textContent === 'Редагувати') {\r\n        document.querySelector('.add').style.display = 'none'\r\n        document.querySelector('.edit').style.display = 'inline-block'\r\n\r\n        const tr = e.target.closest('tr');\r\n        studentId = tr.getAttribute('data-id');\r\n\r\n        document.querySelector('#name').value = tr.querySelector('.name').textContent;;\r\n        document.querySelector('#age').value = tr.querySelector('.age').textContent;\r\n        document.querySelector('#course').value = tr.querySelector('.course').textContent;\r\n        document.querySelector('#skills').value = tr.querySelector('.skills').textContent;\r\n        document.querySelector('#email').value = tr.querySelector('.email').textContent;\r\n        document.querySelector('#isEnrolled').value = tr.querySelector('.isEnrolled').textContent;\r\n}})\r\n\r\ndocument.querySelector('.edit').addEventListener('click', () => {\r\n  const updatedStudent = {\r\n    name: document.querySelector('#name').value,\r\n    age: document.querySelector('#age').value,\r\n    course: document.querySelector('#course').value,\r\n    skills: document.querySelector('#skills').value,\r\n    email: document.querySelector('#email').value,\r\n    isEnrolled: document.querySelector('#isEnrolled').value\r\n  };\r\n  console.log(studentId)\r\n\r\n  updateStudent(studentId, updatedStudent).then(() => {\r\n    getStudents().then((data) => {\r\n      document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n      document.querySelector('.add').style.display = 'inline-block';\r\n      document.querySelector('.edit').style.display = 'none';\r\n    });\r\n  });\r\n});\r\n\r\n// document.querySelector('.add').addEventListener('click', () => {\r\n\r\n// })\r\n\r\n\r\n// 4. Реалізуйте функцію  для deleteStudent\r\n//  видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\r\n\r\ndocument.querySelector('tbody').addEventListener('click', (e) => {\r\n    if (e.target.textContent === 'Видалити'){\r\n        const tr = e.target.closest('tr');\r\n        const studentId = tr.getAttribute('data-id'); \r\n        deleteStudent(studentId).then(() => {\r\n            getStudents().then((data) => {\r\n                console.log(data);\r\n                document.querySelector(\"tbody\").innerHTML = renderStudents(data);\r\n            })})\r\n    }}\r\n)\r\n\r\n// 7. Написати JavaScript-код для обробки\r\n//  подій користувача.\r\n\r\n\r\n// 7.1. Додати обробники подій для кнопок,\r\n//  щоб вони виконували відповідні HTTP-запити.\r\n\r\n\r\n// 7.2. При натисканні на кнопку \"Отримати студентів\" \r\n// (GET), виконати HTTP-запит GET /students і \r\n// відобразити отримані дані в таблиці.\r\n\r\n\r\n// 7.3. Реалізувати форму для додавання нового студента.\r\n//  При натисканні на кнопку \"Додати студента\" (POST), \r\n// зібрати дані з полів вводу, сформувати об'єкт з даними  і \r\n// виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\r\n\r\n\r\n// 7.4. Реалізувати можливість оновлення інформації про студента. \r\n// Для кожного студента в таблиці додати кнопку \"Оновити\".\r\n//  При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — \r\n// ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\r\n\r\n\r\n// 7.5. Додати можливість видалення студента. \r\n// Для кожного студента в таблиці додати кнопку \"Видалити\". \r\n// При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id."],"names":["getStudents","fetch","then","res","json","error","console","log","renderStudents","students","map","object","id","name","age","course","skills","email","isEnrolled","join","addStudent","student","method","body","JSON","stringify","headers","updateStudent","studentData","deleteStudent","document","querySelector","addEventListener","data","innerHTML","e","preventDefault","target","elements","value","studentObject","studentId","textContent","style","display","tr","closest","getAttribute","updatedStudent"],"version":3,"file":"crud-homework.b951c961.js.map"}